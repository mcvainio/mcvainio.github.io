<html>
	<head>
		<meta charset="UTF-8">
		<title>Bathymetry Analytic Tool</title>

		<!-- Leaflet -->
 		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css" />
		<script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"></script>

		<!-- Turf.js -->
		<script src="https://npmcdn.com/@turf/turf/turf.min.js"></script>

		<!-- Chart.js -->
		<script src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>

		<!-- ESRI plugin -->
 <script src="https://unpkg.com/esri-leaflet@3.0.2/dist/esri-leaflet.js"
    integrity="sha512-myckXhaJsP7Q7MZva03Tfme/MSF5a6HC2xryjAM4FxPLHGqlh5VALCbywHnzs2uPoF/4G/QVXyYDDSkp5nPfig=="
    crossorigin=""></script>

		<!-- Leflet Geotiff Reader -->
    		<script src="https://unpkg.com/geotiff@0.4.1/dist/main.js"></script>

		<!-- Proj4js - required BEFORE dataset import -->
		<script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.5.0/proj4.js"></script>


		<style>
			/* style the map container*/
			#mapid {
				width: 50%;
				height: 100%;
				float: left;
			}
			/* style the qaqc window container */
			#canvas-holder {
				width: 50%;
				height: 100%;
				float: right;
				overflow-y:auto;
			}
			/* style the pie chart container */
			#pie-holder {
				width: 69%;
				height: 40%;
				float: left;

			}
			/* style the container for random stats */
			#statholder {
				width: 30%;
				height: 40%;
				float: right;
				text-align: center;
			}
			#meanetc {
				position: relative;
				top: 20%;
				right: 10%;
				border: 1px solid black;
				border-radius: 5px;
			}
			#probareabutton {
				width: 100%;
				text-align: center;
			}
			#bargraphs {
				width: 55%;
				float: left;
				text-align: center;
			}
			#selectiontool {
				width: 44%;
				float: right;
			}
			#toolholder {
				position: absolute;
				top: 50%;
				right: 1%;
				height: 40%;
				width: 20%;
				text-align: center;
				overflow-y:auto;
				border: 1px solid black;
				border-radius: 5px;
			}
			
			/* style the full window container (map + qaqc windows) */
			#container {
				width: 90%;
  				background-color: #FFFFFF;
				height: 90%;
				position: absolute;
				left: 5%;
				top: 5%;
				border: 2px solid black;
				overflow-y:auto;
				border-radius: 10px;

			}
			.button {
  			background-color: #4CAF50;
  			border: none;
  			color: white;
  			padding: 5px 150px;
  			text-align: center;
  			text-decoration: none;
  			display: inline-block;
  			font-size: 16px;
  			margin: 4px 1px;
  			cursor: pointer;
}
body {
  font-family: Tahoma, sans-serif;
  background-color: #000000;

}

		</style>
	</head>



<body>
<p style="color:white"><b>BATHYMETRY ANALYTICS</b></p>
		<!-- container to control the layout -->
		<div id="container">

			<!-- the map -->
			<div id='mapid'></div>


			<!-- container for the charts/qaqc info -->
			<div id="canvas-holder">

				<!-- charts -->
				<div id="pie-holder"><canvas id="myChart"></canvas></div>
				<div id='statholder'><div id='meanetc'></div></div>
				<div id='probareabutton'><a href="github.io" class="button">Click for Problem Zones</a>
</div>
				<div id="selectiontool"><div id="toolholder"><br><u>REGIONAL SELECTION TOOL</u><br><br>Select an area from the map using the tools below. <br><br><img src="icons.png" style="height:30px;">
<br>(ERASE SELECTION)<br><br>(REFRESH GRAPHS)</div></div>
				<div id="bargraphs">
				<canvas id="barChart"></canvas>
				<canvas id="barChart2"></canvas></div>
			</div>
		</div>
<script>

//initialize our map with its starting attributes
//setting the start view
L.esri.get = L.esri.get.JSONP;
let circleLyr;

var map = L.map('mapid').setView([71, -135], 7.5);
//last attribute here is the zoom level to start out with. Higher is closer. 5 is around province-sized. 10-13 is around city-sized.
//layer to identify
  var renderingRule = {
    rasterFunctionArguments: {
      Azimuth: 215,
      Altitude: 60,
      ZFactor: 1
    },
    variableName: 'DEM'
  };
  var hillshade = L.esri.imageMapLayer({
    url: 'https://gis.ngdc.noaa.gov/arcgis/rest/services/multibeam_mosaic/ImageServer',
    renderingRule: renderingRule,
    useCors: false
  }).addTo(map);

//toggle basemap layers
var basemaps = {
    GEBCO: L.tileLayer.wms('https://www.gebco.net/data_and_products/gebco_web_services/web_map_service/mapserv?', {
        layers: 'GEBCO_Latest'
    }),

    'Ocean Basemap (ESRI)': L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer/tile/{z}/{y}/{x}', {
    }),

    'IBCAO': L.tileLayer('https://www.omg.unb.ca/~jmuggah/Bathy/{x}_{y}_{z}.png', {
    }),

};

L.control.layers(basemaps).addTo(map);
basemaps.GEBCO.addTo(map);


  var identifiedPixel;
  var yup;
  var lessthanhundo;
  var btwn1;
  var btwn2;
  var btwn3;
  var btwn4;
  var grtr;
  var num;
  var meanPixel;
  var woop;

drawcircle([-135,71]);

function drawcircle(lngLat){
				const circle = turf.circle(turf.point(lngLat), 5, {
					units: 'kilometers',
					steps: 64,
				});


				circleLyr = L.geoJson(circle, {
					style: {
						color: 'yellow',
						weight: 0.5,
						opacity: 0.6,
						fillColor: '#ff7800',
						fillOpacity: 0.3,
					}
				}).addTo(map);
bl = ([circleLyr.getBounds().getWest(), circleLyr.getBounds().getSouth()]);
tr = ([circleLyr.getBounds().getEast(), circleLyr.getBounds().getNorth()]);
};



getMean(bl,tr);
//write results of the above to the 'meanetc' div beside the venn diagram
document.getElementById('meanetc').innerHTML ="Total Pings =" + "1766" + "<br>Mean = " + yup + "m <br>Values above 600m = " + lessthanhundo + "% <br>" ;


var ctx = document.getElementById('myChart').getContext('2d');
var myChart = new Chart(ctx, {
    type: 'pie',
    data: {
        labels: ['Overlap < 5% diff','Overlap > 5% diff'],
        datasets: [{
            label: 'Percent difference',
            data: [98, 2],
            backgroundColor: [
                'rgba(75, 192, 63, 0.2)',
                'rgba(255, 99, 132, 0.2)',
           ],
            borderColor: [
                'rgba(75, 192, 192, 1)',
                'rgba(255, 99, 132, 1)',

            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});


let chartConfig = {
    type: 'bar',
    data: {
        labels: ['<100m','100m-250m','250m-500m','500m-750m','750m-1km','>1km'],
        datasets: [{
	    label: 'Pings within range',
            data: [55.39, 69.55, 71.30, 82.91, 73.43, 68.32],
            backgroundColor: [
                'rgba(204, 224, 255, 0.6)',
                'rgba(164, 194, 242, 0.6)',
                'rgba(95, 138, 207, 0.6)',
                'rgba(21, 78, 171, 0.6)',
                'rgba(8, 55, 130, 0.6)',
                'rgba(0, 21, 51, 0.6)',
           ],
            borderColor: [
                'rgba(204, 224, 255, 1)',
                'rgba(164, 194, 242, 1)',
                'rgba(95, 138, 207, 1)',
                'rgba(21, 78, 171, 1)',
                'rgba(8, 55, 130, 1)',
                'rgba(0, 21, 51, 1)',
           ],
            borderWidth: 1,
	    barPercentage: 1.0,
	    categoryPercentage: 1.0,
        }]
    },
    options: {
	plugins: {
		legend: false,
		title: {
			display: true,
			text: 'Titley tytle'
			},
},
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
};
var vtx = document.getElementById('barChart').getContext('2d');
var barChart = new Chart(vtx, chartConfig); 

var ctx = document.getElementById('barChart2').getContext('2d');
var barChart2 = new Chart(ctx, {
    type: 'line',
    data: {
        labels: ['<-5%','(5-10)%','(10-15)%','(15-20)%','(20-25)%','>(25)%'],
        datasets: [{
	    label: 'Percent of data within range',
            data: [22, 44, 78, 88, 44, 22],
            backgroundColor: [
 
           ],
            borderColor: [

           ],
            stack: 'combined',
            type: 'bar',
            borderWidth: 1,
	    barPercentage: 1.0,
	    categoryPercentage: 1.0,
	},
	{
	    label: 'line',
            data: [22, 44, 78, 88, 44, 22],
            backgroundColor: [
                'rgba(204, 224, 255, 0.6)',
                'rgba(164, 194, 242, 0.6)',
                'rgba(95, 138, 207, 0.6)',
                'rgba(21, 78, 171, 0.6)',
                'rgba(8, 55, 130, 0.6)',
                'rgba(0, 21, 51, 0.6)',
           ],
            borderColor: [
                'rgba(204, 224, 255, 1)',
                'rgba(164, 194, 242, 1)',
                'rgba(95, 138, 207, 1)',
                'rgba(21, 78, 171, 1)',
                'rgba(8, 55, 130, 1)',
                'rgba(0, 21, 51, 1)',
           ],
            stack: 'combined',
        }]
    },
    options: {
	plugins: {
		legend: false,
		title: {
			display: true,
			text: 'Titley tytle'
			},
		},
        scales: {
            y: {
		stacked: true
            }
        }
    }
});



function getMean(bl,tr){
let points = [];
for (let x = bl[0]; x <= tr[0]; x += 0.02) {
	for (let y = bl[1]; y <= tr[1]; y += 0.02){
		hillshade.identify().at([y,x]).run(function (error, meanPixel) {
			if (error) {
			return;
			}
		woop = meanPixel.pixel;
		points.push(woop.properties.value);
    let sum = 0;
    let lessthan = 0;
    let btwnfirst = 0;
    let btwnscnd = 0;
    let btwnthrd = 0;
    let btwnfrth = 0;
    let grterthan = 0;
    let m = points.length;
    for (let i = 0; i < m; i++) {
        sum += parseFloat(points[i]);
	if (points[i] > -100) {
        	lessthan += 1;
		}
	else if (-250 < points[i] && points[i] <= -100) {
        	btwnfirst += 1;
		}
	else if (-500 < points[i] && points[i] <= -250) {
        	btwnscnd += 1;
		}
	else if (-750 < points[i] && points[i] <= -500) {
        	btwnthrd += 1;
		}
	else if (-1000 < points[i] && points[i] <= -750) {
        	btwnfrth += 1;
		}
	else if (points[i] <= -1000) {
        	grtrthan += 1;
		}
    num = m;

	}
 //the e2 and e-2 specify the number of decimals to return
    yup = Number(Math.round(sum / m+'e2')+'e-2');
    lessthanhundo = Number(Math.round((lessthan / m)*100+'e2')+'e-2');
    btwn1 = Number(Math.round((btwnfirst / m)*100+'e2')+'e-2');
    btwn2 = Number(Math.round((btwnscnd / m)*100+'e2')+'e-2');
    btwn3 = Number(Math.round((btwnthrd / m)*100+'e2')+'e-2');
    btwn4 = Number(Math.round((btwnfrth / m)*100+'e2')+'e-2');
    grtr = Number(Math.round((grtrthan / m)*100+'e2')+'e-2');
		});
	}
}    
};


//click listener
  map.on('click', function (e) {
    if (identifiedPixel) {
      meanetc.innerHTML = 'Loading';
    }
    hillshade.identify().at(e.latlng).run(function (error, results) {
      if (error) {
        return;
      }

	identifiedPixel = results.pixel;
	var center = [e.latlng.lng, e.latlng.lat];
	var centerround = [Number(Math.round((e.latlng.lng)+'e2')+'e-2'), Number(Math.round((e.latlng.lat)+'e2')+'e-2')];	
	map.removeLayer(circleLyr);
	drawcircle(center);
	getMean(bl,tr);
	chartConfig.data.datasets[0].data = [lessthanhundo, btwn1, btwn2, btwn3, btwn4, grtr];
	barChart.update();
document.getElementById('meanetc').innerHTML ="<b>You clicked:</b> " + centerround + "<br><b>Center Depth</b> =" + identifiedPixel.properties.value + "<br><b>Pings Sampled</b> =" + num + "<br><b>Mean</b> = " + yup + "m <br><b>Values shallower than 100m</b> = " + lessthanhundo + "%" ;

   });
  });
		</script>

	</body>
</html>
